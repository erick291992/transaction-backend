// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: operationsType.sql

package db

import (
	"context"
)

const createOperationsType = `-- name: CreateOperationsType :one
INSERT INTO operations_types (
	"description"
) VALUES (
  $1
)
RETURNING id, description, created_at
`

func (q *Queries) CreateOperationsType(ctx context.Context, description string) (OperationsType, error) {
	row := q.db.QueryRowContext(ctx, createOperationsType, description)
	var i OperationsType
	err := row.Scan(&i.ID, &i.Description, &i.CreatedAt)
	return i, err
}

const getOperationsType = `-- name: GetOperationsType :one
SELECT id, description, created_at FROM operations_types
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOperationsType(ctx context.Context, id int64) (OperationsType, error) {
	row := q.db.QueryRowContext(ctx, getOperationsType, id)
	var i OperationsType
	err := row.Scan(&i.ID, &i.Description, &i.CreatedAt)
	return i, err
}

const listOperationsTypes = `-- name: ListOperationsTypes :many
SELECT id, description, created_at FROM operations_types
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListOperationsTypesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOperationsTypes(ctx context.Context, arg ListOperationsTypesParams) ([]OperationsType, error) {
	rows, err := q.db.QueryContext(ctx, listOperationsTypes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OperationsType
	for rows.Next() {
		var i OperationsType
		if err := rows.Scan(&i.ID, &i.Description, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
