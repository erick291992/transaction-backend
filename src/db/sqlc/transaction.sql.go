// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: transaction.sql

package db

import (
	"context"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
	account_id,
	operation_type,
	amount
) VALUES (
  $1, $2, $3
)
RETURNING id, account_id, operation_type, amount, event_date
`

type CreateTransactionParams struct {
	AccountID     int64  `json:"accountID"`
	OperationType int64  `json:"operationType"`
	Amount        string `json:"amount"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction, arg.AccountID, arg.OperationType, arg.Amount)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.OperationType,
		&i.Amount,
		&i.EventDate,
	)
	return i, err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, account_id, operation_type, amount, event_date FROM transactions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransaction(ctx context.Context, id int64) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.OperationType,
		&i.Amount,
		&i.EventDate,
	)
	return i, err
}
